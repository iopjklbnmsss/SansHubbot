<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeepSeek API</title>
    <style>
        :root {
            --primary-color: #6e48aa;
            --secondary-color: #9d50bb;
            --background-color: #f5f7fa;
            --text-color: #333;
            --light-text: #666;
            --border-color: #ddd;
            --ai-bubble: #f0f4ff;
            --user-bubble: #6e48aa;
            --user-text: white;
            --code-bg: #282c34;
            --code-text: #abb2bf;
            --thinking-bg: #f8f9fa;
            --web-search-bg: #fff8e6;
            --code-header-bg: #1e2227;
            --code-copy-bg: #3a3f4b;
            --code-line-highlight: #2c313a;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background-color: white;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .menu-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: var(--primary-color);
        }

        .header-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .header-title img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 8px;
            object-fit: cover;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .header-btn {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 16px;
            cursor: pointer;
        }

        .chat-container {
            flex: 1;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex: 1;
            padding: 12px;
            overflow-y: auto;
            background-color: white;
        }

        .message {
            display: flex;
            margin-bottom: 16px;
            max-width: 90%;
        }

        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 8px;
            object-fit: cover;
            flex-shrink: 0;
        }

        .message-content {
            display: flex;
            flex-direction: column;
            flex: 1;
            min-width: 0;
        }

        .message-user {
            font-weight: 500;
            font-size: 13px;
            margin-bottom: 4px;
            color: var(--light-text);
        }

        .message-text {
            padding: 10px 14px;
            border-radius: 18px;
            font-size: 15px;
            line-height: 1.5;
            word-break: break-word;
            white-space: pre-wrap;
        }

        .ai-message {
            align-self: flex-start;
        }

        .ai-message .message-text {
            background-color: var(--ai-bubble);
            border-top-left-radius: 5px;
        }

        .user-message {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .user-message .message-content {
            align-items: flex-end;
        }

        .user-message .message-text {
            background-color: var(--user-bubble);
            color: var(--user-text);
            border-top-right-radius: 5px;
        }

        .user-message .message-avatar {
            margin-right: 0;
            margin-left: 8px;
        }

        .input-area {
            padding: 12px;
            background-color: white;
            border-top: 1px solid var(--border-color);
            display: flex;
            gap: 8px;
            align-items: center;
            position: relative;
        }

        .message-input {
            flex: 1;
            padding: 10px 14px;
            border: 1px solid var(--border-color);
            border-radius: 20px;
            font-size: 15px;
            resize: none;
            outline: none;
            transition: border-color 0.3s;
            max-height: 120px;
        }

        .message-input:focus {
            border-color: var(--primary-color);
        }

        .send-button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
            flex-shrink: 0;
        }

        .send-button:hover {
            background-color: var(--secondary-color);
        }

        .send-button svg {
            width: 18px;
            height: 18px;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 5px 14px;
            background-color: var(--ai-bubble);
            border-radius: 18px;
            width: fit-content;
            margin-bottom: 16px;
        }

        .typing-dot {
            width: 7px;
            height: 7px;
            background-color: var(--light-text);
            border-radius: 50%;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
            }
            30% {
                transform: translateY(-4px);
            }
        }

        .model-selector {
            position: fixed;
            bottom: 72px;
            left: 50%;
            transform: translateX(-50%);
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 8px 12px;
            font-size: 14px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 5;
            width: calc(100% - 24px);
            max-width: 300px;
            display: none;
        }

        .model-options {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .model-option {
            display: flex;
            align-items: center;
            padding: 8px;
            border-radius: 8px;
            cursor: pointer;
        }

        .model-option:hover {
            background-color: rgba(110, 72, 170, 0.1);
        }

        .model-option.active {
            background-color: rgba(110, 72, 170, 0.2);
        }

        .model-icon {
            width: 20px;
            height: 20px;
            margin-right: 8px;
        }

        .model-name {
            flex: 1;
        }

        .model-check {
            color: var(--primary-color);
            font-size: 16px;
            opacity: 0;
        }

        .model-option.active .model-check {
            opacity: 1;
        }

        .mode-selector {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
        }

        .mode-btn {
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            background-color: #f0f0f0;
            border: none;
            cursor: pointer;
        }

        .mode-btn.active {
            background-color: var(--primary-color);
            color: white;
        }

        .settings-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .settings-content {
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            width: 90%;
            max-width: 400px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--border-color);
        }

        .settings-title {
            font-size: 18px;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--light-text);
        }

        .settings-option {
            margin-bottom: 16px;
        }

        .settings-option label {
            display: block;
            margin-bottom: 6px;
            font-size: 14px;
            font-weight: 500;
        }

        .settings-option input {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 14px;
        }

        .save-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            margin-top: 8px;
            transition: background-color 0.3s;
        }

        .save-btn:hover {
            background-color: var(--secondary-color);
        }

        .sidebar {
            position: fixed;
            top: 0;
            left: -280px;
            width: 280px;
            height: 100%;
            background-color: white;
            z-index: 1001;
            transition: transform 0.3s ease;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            overflow-y: auto;
        }

        .sidebar.open {
            transform: translateX(280px);
        }

        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: 600;
        }

        .close-sidebar {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--light-text);
        }

        .new-chat-btn {
            width: 100%;
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            margin-bottom: 20px;
            cursor: pointer;
        }

        .history-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .history-item {
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .history-item:hover {
            background-color: rgba(110, 72, 170, 0.1);
        }

        .history-item.active {
            background-color: rgba(110, 72, 170, 0.2);
        }

        /* 代码块样式优化 */
        .code-block {
            background-color: var(--code-bg);
            border-radius: 8px;
            margin: 12px 0;
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .code-header {
            background-color: var(--code-header-bg);
            padding: 8px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-family: 'SF Mono', Menlo, Monaco, Consolas, 'Courier New', monospace;
        }

        .code-language {
            color: #909296;
            font-size: 12px;
            text-transform: uppercase;
        }

        .code-actions {
            display: flex;
            gap: 8px;
        }

        .code-btn {
            background-color: var(--code-copy-bg);
            color: #abb2bf;
            border: none;
            border-radius: 4px;
            padding: 4px 8px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
            transition: all 0.2s;
        }

        .code-btn:hover {
            background-color: #4b5263;
            color: white;
        }

        .code-btn svg {
            width: 12px;
            height: 12px;
        }

        .code-content {
            color: var(--code-text);
            font-family: 'SF Mono', Menlo, Monaco, Consolas, 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            padding: 12px;
            overflow-x: auto;
            white-space: pre;
            tab-size: 4;
        }

        .code-content .line {
            display: block;
            min-height: 1em;
        }

        .code-content .line.highlight {
            background-color: var(--code-line-highlight);
        }

        /* Markdown 样式 */
        .markdown {
            line-height: 1.6;
        }

        .markdown h1, 
        .markdown h2, 
        .markdown h3, 
        .markdown h4, 
        .markdown h5, 
        .markdown h6 {
            margin: 1em 0 0.5em 0;
            font-weight: 600;
            color: var(--text-color);
        }

        .markdown h1 {
            font-size: 1.5em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.3em;
        }

        .markdown h2 {
            font-size: 1.3em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.3em;
        }

        .markdown h3 {
            font-size: 1.1em;
        }

        .markdown p {
            margin: 0.8em 0;
        }

        .markdown ul, 
        .markdown ol {
            margin: 0.8em 0;
            padding-left: 2em;
        }

        .markdown li {
            margin: 0.4em 0;
        }

        .markdown blockquote {
            margin: 0.8em 0;
            padding: 0 1em;
            color: #6a737d;
            border-left: 0.25em solid #dfe2e5;
        }

        .markdown pre {
            margin: 1em 0;
            padding: 0;
            background-color: transparent;
        }

        .markdown code:not(.code-content) {
            font-family: 'SF Mono', Menlo, Monaco, Consolas, 'Courier New', monospace;
            background-color: rgba(175, 184, 193, 0.2);
            border-radius: 3px;
            padding: 0.2em 0.4em;
            font-size: 85%;
        }

        .markdown a {
            color: var(--primary-color);
            text-decoration: none;
        }

        .markdown a:hover {
            text-decoration: underline;
        }

        .markdown table {
            border-collapse: collapse;
            margin: 1em 0;
            width: 100%;
        }

        .markdown th, 
        .markdown td {
            padding: 6px 13px;
            border: 1px solid var(--border-color);
        }

        .markdown th {
            background-color: #f6f8fa;
            font-weight: 600;
        }

        .markdown tr:nth-child(even) {
            background-color: #f6f8fa;
        }

        .thinking-process {
            background-color: var(--thinking-bg);
            border-radius: 8px;
            padding: 12px;
            margin: 8px 0;
            font-size: 14px;
            color: var(--light-text);
        }

        .thinking-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            margin-bottom: 8px;
        }

        .thinking-title {
            font-weight: bold;
            color: var(--primary-color);
        }

        .toggle-thinking {
            color: var(--primary-color);
            font-size: 14px;
            background: none;
            border: none;
            cursor: pointer;
        }

        .thinking-content {
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .thinking-content.collapsed {
            max-height: 0;
        }

        .web-search-results {
            background-color: var(--web-search-bg);
            border-radius: 8px;
            padding: 12px;
            margin: 8px 0;
            font-size: 14px;
        }

        .web-search-title {
            font-weight: bold;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }

        .web-search-item {
            margin-bottom: 8px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .web-search-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .web-search-url {
            color: #1a0dab;
            font-size: 12px;
            margin-bottom: 4px;
            word-break: break-all;
        }

        .web-search-snippet {
            color: #4d5156;
            font-size: 13px;
        }

        .search-icon {
            margin-right: 6px;
            color: #1a0dab;
        }

        .web-search-toggle {
            color: var(--primary-color);
            text-decoration: underline;
            cursor: pointer;
            font-size: 13px;
            margin-top: 8px;
            display: inline-block;
        }

        /* 特殊字符样式 */
        .special-char {
            font-family: monospace;
            background-color: #f0f0f0;
            padding: 0 2px;
            border-radius: 2px;
        }

        /* 移动端优化 */
        @media (max-width: 480px) {
            .message {
                max-width: 95%;
            }
            
            .message-text {
                padding: 8px 12px;
                font-size: 14px;
            }
            
            .code-content {
                font-size: 13px;
                padding: 8px;
            }
            
            .code-header {
                padding: 6px 8px;
            }
            
            .code-btn {
                padding: 3px 6px;
                font-size: 11px;
            }
            
            .model-selector {
                bottom: 68px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-left">
            <button class="menu-btn" id="menuBtn">☰</button>
            <div class="header-title">
                <img id="ai-avatar" src="https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640" alt="DeepSeek">
                <span>尘三削</span>
            </div>
        </div>
        <div class="header-actions">
            <button class="header-btn" id="settingsBtn">设置</button>
        </div>
    </div>

    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-title">聊天记录</div>
            <button class="close-sidebar" id="closeSidebarBtn">&times;</button>
        </div>
        <button class="new-chat-btn" id="newChatBtn">新建对话</button>
        <div class="history-list" id="historyList">
            <!-- 聊天历史记录会在这里动态添加 -->
        </div>
    </div>

    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <!-- 消息会在这里动态添加 -->
        </div>
        
        <div class="model-selector" id="modelSelector">
            <div class="mode-selector">
                <button class="mode-btn" data-mode="normal">普通对话</button>
                <button class="mode-btn active" data-mode="deep">深度思考</button>
                <button class="mode-btn" data-mode="web">联网搜索</button>
            </div>
            <div class="model-options">
                <div class="model-option active" data-model="deepseek-chat">
                    <img class="model-icon" src="https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640" alt="DeepSeek Chat">
                    <span class="model-name">DeepSeek Chat</span>
                    <span class="model-check">✓</span>
                </div>
                <div class="model-option" data-model="deepseek-coder">
                    <img class="model-icon" src="https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640" alt="DeepSeek Coder">
                    <span class="model-name">DeepSeek Coder</span>
                    <span class="model-check">✓</span>
                </div>
                <div class="model-option" data-model="deepseek-math">
                    <img class="model-icon" src="https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640" alt="DeepSeek Math">
                    <span class="model-name">DeepSeek Math</span>
                    <span class="model-check">✓</span>
                </div>
                <div class="model-option" data-model="deepseek-research">
                    <img class="model-icon" src="https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640" alt="DeepSeek Research">
                    <span class="model-name">DeepSeek Research</span>
                    <span class="model-check">✓</span>
                </div>
            </div>
        </div>
        
        <div class="input-area">
            <button class="header-btn" id="modelToggleBtn">R1</button>
            <textarea class="message-input" id="messageInput" placeholder="输入消息... (Shift+Enter换行, Enter发送)" rows="1"></textarea>
            <button class="send-button" id="sendButton">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    </div>

    <div class="settings-modal" id="settingsModal">
        <div class="settings-content">
            <div class="settings-header">
                <h2 class="settings-title">设置</h2>
                <button class="close-btn" id="closeSettingsBtn">&times;</button>
            </div>
            <div class="settings-option">
                <label for="userAvatarUrl">用户头像URL</label>
                <input type="text" id="userAvatarUrl" placeholder="输入用户头像URL">
            </div>
            <div class="settings-option">
                <label for="userDisplayName">显示名称</label>
                <input type="text" id="userDisplayName" placeholder="输入显示名称">
            </div>
            <div class="settings-option">
                <label for="apiKey">API密钥</label>
                <input type="password" id="apiKey" placeholder="输入DeepSeek API密钥">
            </div>
            <button class="save-btn" id="saveSettingsBtn">保存设置</button>
        </div>
    </div>

    <script>
        // 获取DOM元素
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const modelToggleBtn = document.getElementById('modelToggleBtn');
        const modelSelector = document.getElementById('modelSelector');
        const settingsBtn = document.getElementById('settingsBtn');
        const settingsModal = document.getElementById('settingsModal');
        const closeSettingsBtn = document.getElementById('closeSettingsBtn');
        const saveSettingsBtn = document.getElementById('saveSettingsBtn');
        const userAvatarUrl = document.getElementById('userAvatarUrl');
        const userDisplayName = document.getElementById('userDisplayName');
        const apiKeyInput = document.getElementById('apiKey');
        const menuBtn = document.getElementById('menuBtn');
        const sidebar = document.getElementById('sidebar');
        const closeSidebarBtn = document.getElementById('closeSidebarBtn');
        const newChatBtn = document.getElementById('newChatBtn');
        const historyList = document.getElementById('historyList');
        const modeBtns = document.querySelectorAll('.mode-btn');
        const modelOptions = document.querySelectorAll('.model-option');

        // 当前对话状态
        let currentChatId = 'chat-' + Date.now();
        let chats = {};
        let isTyping = false;
        let currentModel = 'deepseek-chat';
        let currentMode = 'deep';
        let currentResponse = '';
        let responseDiv = null;
        let currentStream = null;
        let webSearchResults = null;
        
        // 随机用户头像
        const randomAvatars = [
            'https://randomuser.me/api/portraits/men/1.jpg',
            'https://randomuser.me/api/portraits/women/2.jpg',
            'https://randomuser.me/api/portraits/men/3.jpg',
            'https://randomuser.me/api/portraits/women/4.jpg',
            'https://randomuser.me/api/portraits/men/5.jpg'
        ];
        const randomAvatar = randomAvatars[Math.floor(Math.random() * randomAvatars.length)];

        // 初始化
        function init() {
            // 从本地存储加载设置
            loadSettings();
            
            // 从本地存储加载聊天记录
            const savedChats = localStorage.getItem('deepseekChats');
            if (savedChats) {
                chats = JSON.parse(savedChats);
                
                // 显示聊天历史
                renderChatHistory();
                
                // 如果有聊天记录，加载最后一个
                const chatIds = Object.keys(chats);
                if (chatIds.length > 0) {
                    currentChatId = chatIds[chatIds.length - 1];
                    loadChat(currentChatId);
                }
            } else {
                // 新建一个空聊天
                chats[currentChatId] = {
                    id: currentChatId,
                    title: '新对话',
                    messages: [],
                    model: currentModel,
                    mode: currentMode,
                    createdAt: Date.now()
                };
                saveChats();
            }
            
            // 设置当前聊天为活跃状态
            setActiveChat(currentChatId);
        }

        // 加载设置
        function loadSettings() {
            const settings = JSON.parse(localStorage.getItem('deepseekSettings')) || {};
            
            if (settings.userAvatar) {
                userAvatarUrl.value = settings.userAvatar;
            } else {
                // 设置随机头像
                userAvatarUrl.value = randomAvatar;
                saveSettings();
            }
            
            if (settings.userName) {
                userDisplayName.value = settings.userName;
            }
            
            if (settings.apiKey) {
                apiKeyInput.value = settings.apiKey;
            }
        }

        // 保存设置
        function saveSettings() {
            const settings = {
                userAvatar: userAvatarUrl.value || randomAvatar,
                userName: userDisplayName.value || '用户',
                apiKey: apiKeyInput.value || ''
            };
            
            localStorage.setItem('deepseekSettings', JSON.stringify(settings));
            
            // 关闭设置模态框
            settingsModal.style.display = 'none';
            
            // 重新渲染消息以更新头像
            renderMessages();
        }

        // 渲染聊天历史
        function renderChatHistory() {
            historyList.innerHTML = '';
            
            const chatIds = Object.keys(chats).sort((a, b) => {
                return chats[b].createdAt - chats[a].createdAt;
            });
            
            chatIds.forEach(chatId => {
                const chat = chats[chatId];
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                if (chatId === currentChatId) {
                    historyItem.classList.add('active');
                }
                historyItem.textContent = chat.title;
                historyItem.dataset.chatId = chatId;
                
                historyItem.addEventListener('click', () => {
                    currentChatId = chatId;
                    loadChat(chatId);
                    setActiveChat(chatId);
                    toggleSidebar();
                });
                
                historyList.appendChild(historyItem);
            });
        }

        // 设置活跃聊天
        function setActiveChat(chatId) {
            const historyItems = document.querySelectorAll('.history-item');
            historyItems.forEach(item => {
                if (item.dataset.chatId === chatId) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }

        // 加载聊天
        function loadChat(chatId) {
            const chat = chats[chatId];
            if (!chat) return;
            
            // 更新当前模型和模式
            currentModel = chat.model || 'deepseek-chat';
            currentMode = chat.mode || 'deep';
            
            // 更新UI
            updateModelUI();
            updateModeUI();
            
            // 清空当前消息
            chatMessages.innerHTML = '';
            
            // 添加消息
            chat.messages.forEach(message => {
                addMessageToChat(message.role, message.content, false);
            });
            
            // 滚动到底部
            scrollToBottom();
        }

        // 更新模型UI
        function updateModelUI() {
            modelOptions.forEach(option => {
                if (option.dataset.model === currentModel) {
                    option.classList.add('active');
                    option.querySelector('.model-check').style.opacity = '1';
                } else {
                    option.classList.remove('active');
                    option.querySelector('.model-check').style.opacity = '0';
                }
            });
        }

        // 更新模式UI
        function updateModeUI() {
            modeBtns.forEach(btn => {
                if (btn.dataset.mode === currentMode) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
        }

        // 新建聊天
        function newChat() {
            // 取消任何正在进行的请求
            if (currentStream) {
                currentStream.abort();
                currentStream = null;
            }
            
            currentChatId = 'chat-' + Date.now();
            chats[currentChatId] = {
                id: currentChatId,
                title: '新对话',
                messages: [],
                model: currentModel,
                mode: currentMode,
                createdAt: Date.now()
            };
            
            saveChats();
            renderChatHistory();
            loadChat(currentChatId);
            setActiveChat(currentChatId);
        }

        // 保存聊天记录
        function saveChats() {
            localStorage.setItem('deepseekChats', JSON.stringify(chats));
        }

        // 渲染消息
        function renderMessages() {
            chatMessages.innerHTML = '';
            
            if (chats[currentChatId]) {
                chats[currentChatId].messages.forEach(message => {
                    addMessageToChat(message.role, message.content, false);
                });
            }
            
            scrollToBottom();
        }

        // 添加消息到聊天
        function addMessageToChat(role, content, isNew = true) {
            if (isNew && role === 'assistant' && responseDiv) {
                // 如果是新的AI消息且已经有响应div，则更新它
                processContent(content, responseDiv);
                return;
            }
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}-message`;
            
            const settings = JSON.parse(localStorage.getItem('deepseekSettings')) || {};
            const userAvatarSrc = settings.userAvatar || randomAvatar;
            const aiAvatarSrc = 'https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640';
            const userName = settings.userName || '用户';
            
            if (role === 'user') {
                messageDiv.innerHTML = `
                    <img class="message-avatar" src="${userAvatarSrc}" alt="用户头像">
                    <div class="message-content">
                        <div class="message-user">${userName}</div>
                        <div class="message-text">${escapeHtml(content)}</div>
                    </div>
                `;
            } else {
                messageDiv.innerHTML = `
                    <img class="message-avatar" src="${aiAvatarSrc}" alt="AI头像">
                    <div class="message-content">
                        <div class="message-user">尘三削</div>
                        <div class="message-text"></div>
                    </div>
                `;
                
                // 保存响应div的引用
                responseDiv = messageDiv.querySelector('.message-text');
                processContent(content, responseDiv);
            }
            
            chatMessages.appendChild(messageDiv);
            
            // 如果是新的用户消息，添加到当前聊天的消息数组
            if (isNew && chats[currentChatId]) {
                chats[currentChatId].messages.push({
                    role: role,
                    content: content
                });
                
                // 如果是第一条用户消息，设置为聊天标题
                if (role === 'user' && chats[currentChatId].messages.length === 1) {
                    const title = content.length > 20 ? content.substring(0, 20) + '...' : content;
                    chats[currentChatId].title = title;
                    renderChatHistory();
                }
                
                saveChats();
            }
            
            scrollToBottom();
        }

        // 处理内容，包括代码块、思考过程和网络搜索结果
        function processContent(content, container) {
            // 清空容器
            container.innerHTML = '';
            
            // 创建Markdown容器
            const markdownDiv = document.createElement('div');
            markdownDiv.className = 'markdown';
            
            // 处理特殊字符
            content = processSpecialChars(content);
            
            // 处理代码块
            const codeBlocks = extractCodeBlocks(content);
            let remainingText = codeBlocks.remainingText;
            
            // 处理Markdown内容
            markdownDiv.innerHTML = formatMarkdown(remainingText);
            container.appendChild(markdownDiv);
            
            // 添加代码块
            codeBlocks.blocks.forEach(block => {
                container.appendChild(createCodeBlock(block.lang, block.code));
            });
        }

        // 格式化Markdown文本
        function formatMarkdown(text) {
            // 处理标题
            text = text.replace(/^# (.*$)/gm, '<h1>$1</h1>')
                       .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                       .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                       .replace(/^#### (.*$)/gm, '<h4>$1</h4>')
                       .replace(/^##### (.*$)/gm, '<h5>$1</h5>')
                       .replace(/^###### (.*$)/gm, '<h6>$1</h6>');
            
            // 处理粗体和斜体
            text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                       .replace(/\*(.*?)\*/g, '<em>$1</em>')
                       .replace(/\_\_(.*?)\_\_/g, '<strong>$1</strong>')
                       .replace(/\_(.*?)\_/g, '<em>$1</em>');
            
            // 处理内联代码
            text = text.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            // 处理链接
            text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
            
            // 处理图片
            text = text.replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" style="max-width:100%;">');
            
            // 处理无序列表
            text = text.replace(/^\s*\*\s(.*$)/gm, '<li>$1</li>')
                       .replace(/^\s*-\s(.*$)/gm, '<li>$1</li>')
                       .replace(/^\s*\+\s(.*$)/gm, '<li>$1</li>');
            
            // 处理有序列表
            text = text.replace(/^\s*\d+\.\s(.*$)/gm, '<li>$1</li>');
            
            // 处理引用
            text = text.replace(/^\>\s(.*$)/gm, '<blockquote>$1</blockquote>');
            
            // 处理换行
            text = text.replace(/\n/g, '<br>');
            
            return text;
        }

        // 提取代码块
        function extractCodeBlocks(text) {
            const blocks = [];
            const regex = /```(\w*)\n([\s\S]*?)\n```/g;
            let match;
            let lastIndex = 0;
            let remainingText = '';
            
            while ((match = regex.exec(text)) !== null) {
                // 添加前面的文本
                remainingText += text.substring(lastIndex, match.index);
                lastIndex = regex.lastIndex;
                
                // 添加代码块
                blocks.push({
                    lang: match[1] || 'text',
                    code: match[2]
                });
            }
            
            // 添加剩余的文本
            remainingText += text.substring(lastIndex);
            
            return {
                blocks: blocks,
                remainingText: remainingText
            };
        }

        // 处理特殊字符
        function processSpecialChars(text) {
            // 处理HTML实体
            text = text.replace(/&/g, '&amp;')
                       .replace(/</g, '&lt;')
                       .replace(/>/g, '&gt;')
                       .replace(/"/g, '&quot;')
                       .replace(/'/g, '&#039;');
            
            // 处理特殊符号
            const specialChars = {
                '→': '→',
                '←': '←',
                '↑': '↑',
                '↓': '↓',
                '↔': '↔',
                '©': '©',
                '®': '®',
                '™': '™',
                '€': '€',
                '£': '£',
                '¥': '¥',
                '§': '§',
                '¶': '¶',
                '•': '•',
                '…': '…',
                '≠': '≠',
                '≤': '≤',
                '≥': '≥',
                '≈': '≈',
                '∞': '∞',
                '√': '√',
                '∫': '∫',
                '∑': '∑',
                '∏': '∏',
                '∂': '∂',
                '∆': '∆',
                '∇': '∇',
                '∈': '∈',
                '∉': '∉',
                '∩': '∩',
                '∪': '∪',
                '⊂': '⊂',
                '⊃': '⊃',
                '⊆': '⊆',
                '⊇': '⊇',
                '∧': '∧',
                '∨': '∨',
                '¬': '¬',
                '∀': '∀',
                '∃': '∃',
                '∴': '∴',
                '∵': '∵',
                '≅': '≅',
                '≃': '≃',
                '≪': '≪',
                '≫': '≫',
                '≡': '≡',
                '≢': '≢',
                '⊕': '⊕',
                '⊗': '⊗',
                '⊥': '⊥',
                '∥': '∥',
                '∠': '∠',
                '⌈': '⌈',
                '⌉': '⌉',
                '⌊': '⌊',
                '⌋': '⌋',
                '〈': '〈',
                '〉': '〉',
                '◊': '◊',
                '♠': '♠',
                '♣': '♣',
                '♥': '♥',
                '♦': '♦',
                '★': '★',
                '☆': '☆',
                '☀': '☀',
                '☁': '☁',
                '☂': '☂',
                '☃': '☃',
                '☎': '☎',
                '☏': '☏',
                '☑': '☑',
                '☒': '☒',
                '☜': '☜',
                '☞': '☞',
                '☝': '☝',
                '☟': '☟',
                '☠': '☠',
                '☢': '☢',
                '☣': '☣',
                '☤': '☤',
                '☥': '☥',
                '☦': '☦',
                '☧': '☧',
                '☨': '☨',
                '☩': '☩',
                '☪': '☪',
                '☫': '☫',
                '☬': '☬',
                '☭': '☭',
                '☮': '☮',
                '☯': '☯',
                '☰': '☰',
                '☱': '☱',
                '☲': '☲',
                '☳': '☳',
                '☴': '☴',
                '☵': '☵',
                '☶': '☶',
                '☷': '☷',
                '☸': '☸',
                '☹': '☹',
                '☺': '☺',
                '☻': '☻',
                '☼': '☼',
                '☽': '☽',
                '☾': '☾',
                '☿': '☿',
                '♀': '♀',
                '♁': '♁',
                '♂': '♂',
                '♃': '♃',
                '♄': '♄',
                '♅': '♅',
                '♆': '♆',
                '♇': '♇',
                '♈': '♈',
                '♉': '♉',
                '♊': '♊',
                '♋': '♋',
                '♌': '♌',
                '♍': '♍',
                '♎': '♎',
                '♏': '♏',
                '♐': '♐',
                '♑': '♑',
                '♒': '♒',
                '♓': '♓',
                '♔': '♔',
                '♕': '♕',
                '♖': '♖',
                '♗': '♗',
                '♘': '♘',
                '♙': '♙',
                '♚': '♚',
                '♛': '♛',
                '♜': '♜',
                '♝': '♝',
                '♞': '♞',
                '♟': '♟',
                '♡': '♡',
                '♢': '♢',
                '♤': '♤',
                '♧': '♧',
                '♨': '♨',
                '♩': '♩',
                '♪': '♪',
                '♫': '♫',
                '♬': '♬',
                '♭': '♭',
                '♮': '♮',
                '♯': '♯',
                '✁': '✁',
                '✂': '✂',
                '✃': '✃',
                '✄': '✄',
                '✆': '✆',
                '✇': '✇',
                '✈': '✈',
                '✉': '✉',
                '✌': '✌',
                '✍': '✍',
                '✎': '✎',
                '✏': '✏',
                '✐': '✐',
                '✑': '✑',
                '✒': '✒',
                '✓': '✓',
                '✔': '✔',
                '✕': '✕',
                '✖': '✖',
                '✗': '✗',
                '✘': '✘',
                '✙': '✙',
                '✚': '✚',
                '✛': '✛',
                '✜': '✜',
                '✝': '✝',
                '✞': '✞',
                '✟': '✟',
                '✠': '✠',
                '✡': '✡',
                '✢': '✢',
                '✣': '✣',
                '✤': '✤',
                '✥': '✥',
                '✦': '✦',
                '✧': '✧',
                '✨': '✨',
                '✩': '✩',
                '✪': '✪',
                '✫': '✫',
                '✬': '✬',
                '✭': '✭',
                '✮': '✮',
                '✯': '✯',
                '✰': '✰',
                '✱': '✱',
                '✲': '✲',
                '✳': '✳',
                '✴': '✴',
                '✵': '✵',
                '✶': '✶',
                '✷': '✷',
                '✸': '✸',
                '✹': '✹',
                '✺': '✺',
                '✻': '✻',
                '✼': '✼',
                '✽': '✽',
                '✾': '✾',
                '✿': '✿',
                '❀': '❀',
                '❁': '❁',
                '❂': '❂',
                '❃': '❃',
                '❄': '❄',
                '❅': '❅',
                '❆': '❆',
                '❇': '❇',
                '❈': '❈',
                '❉': '❉',
                '❊': '❊',
                '❋': '❋',
                '❌': '❌',
                '❍': '❍',
                '❎': '❎',
                '❏': '❏',
                '❐': '❐',
                '❑': '❑',
                '❒': '❒',
                '❓': '❓',
                '❔': '❔',
                '❕': '❕',
                '❗': '❗',
                '❘': '❘',
                '❙': '❙',
                '❚': '❚',
                '❛': '❛',
                '❜': '❜',
                '❝': '❝',
                '❞': '❞',
                '❟': '❟',
                '❠': '❠',
                '❡': '❡',
                '❢': '❢',
                '❣': '❣',
                '❤': '❤',
                '❥': '❥',
                '❦': '❦',
                '❧': '❧',
                '❨': '❨',
                '❩': '❩',
                '❪': '❪',
                '❫': '❫',
                '❬': '❬',
                '❭': '❭',
                '❮': '❮',
                '❯': '❯',
                '❰': '❰',
                '❱': '❱',
                '❲': '❲',
                '❳': '❳',
                '❴': '❴',
                '❵': '❵',
                '❶': '❶',
                '❷': '❷',
                '❸': '❸',
                '❹': '❹',
                '❺': '❺',
                '❻': '❻',
                '❼': '❼',
                '❽': '❽',
                '❾': '❾',
                '❿': '❿',
                '➀': '➀',
                '➁': '➁',
                '➂': '➂',
                '➃': '➃',
                '➄': '➄',
                '➅': '➅',
                '➆': '➆',
                '➇': '➇',
                '➈': '➈',
                '➉': '➉',
                '➊': '➊',
                '➋': '➋',
                '➌': '➌',
                '➍': '➍',
                '➎': '➎',
                '➏': '➏',
                '➐': '➐',
                '➑': '➑',
                '➒': '➒',
                '➓': '➓',
                '➕': '➕',
                '➖': '➖',
                '➗': '➗',
                '➘': '➘',
                '➙': '➙',
                '➚': '➚',
                '➛': '➛',
                '➜': '➜',
                '➝': '➝',
                '➞': '➞',
                '➟': '➟',
                '➠': '➠',
                '➡': '➡',
                '➢': '➢',
                '➣': '➣',
                '➤': '➤',
                '➥': '➥',
                '➦': '➦',
                '➧': '➧',
                '➨': '➨',
                '➩': '➩',
                '➪': '➪',
                '➫': '➫',
                '➬': '➬',
                '➭': '➭',
                '➮': '➮',
                '➯': '➯',
                '➰': '➰',
                '➱': '➱',
                '➲': '➲',
                '➳': '➳',
                '➴': '➴',
                '➵': '➵',
                '➶': '➶',
                '➷': '➷',
                '➸': '➸',
                '➹': '➹',
                '➺': '➺',
                '➻': '➻',
                '➼': '➼',
                '➽': '➽',
                '➾': '➾'
            };
            
            // 替换特殊字符
            for (const [char, entity] of Object.entries(specialChars)) {
                text = text.replace(new RegExp(char, 'g'), `<span class="special-char">${entity}</span>`);
            }
            
            return text;
        }

        // 创建代码块
        function createCodeBlock(lang, code) {
            const codeBlock = document.createElement('div');
            codeBlock.className = 'code-block';
            
            const langDisplay = lang || 'text';
            
            // 分割代码行
            const lines = code.split('\n');
            const lineNumbers = Array.from({length: lines.length}, (_, i) => i + 1);
            
            // 创建代码内容
            const codeContent = document.createElement('div');
            codeContent.className = 'code-content';
            
            lines.forEach((line, index) => {
                const lineDiv = document.createElement('div');
                lineDiv.className = 'line';
                lineDiv.textContent = line;
                codeContent.appendChild(lineDiv);
            });
            
            codeBlock.innerHTML = `
                <div class="code-header">
                    <span class="code-language">${langDisplay}</span>
                    <div class="code-actions">
                        <button class="code-btn copy-btn">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                            复制
                        </button>
                        <button class="code-btn download-btn">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="7 10 12 15 17 10"></polyline>
                                <line x1="12" y1="15" x2="12" y2="3"></line>
                            </svg>
                            下载
                        </button>
                    </div>
                </div>
            `;
            
            codeBlock.appendChild(codeContent);
            
            // 添加复制功能
            const copyBtn = codeBlock.querySelector('.copy-btn');
            copyBtn.addEventListener('click', () => {
                navigator.clipboard.writeText(code).then(() => {
                    copyBtn.innerHTML = `
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M20 6L9 17l-5-5"></path>
                        </svg>
                        已复制
                    `;
                    setTimeout(() => {
                        copyBtn.innerHTML = `
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                            复制
                        `;
                    }, 2000);
                });
            });
            
            // 添加下载功能
            const downloadBtn = codeBlock.querySelector('.download-btn');
            downloadBtn.addEventListener('click', () => {
                downloadCode(code, lang);
            });
            
            // 如果是HTML代码，添加测试按钮
            if (lang === 'html') {
                const tryBtn = document.createElement('button');
                tryBtn.className = 'code-btn try-btn';
                tryBtn.innerHTML = `
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="5 3 19 12 5 21 5 3"></polygon>
                    </svg>
                    测试
                `;
                tryBtn.addEventListener('click', () => {
                    const newWindow = window.open('', '_blank');
                    newWindow.document.write(code);
                    newWindow.document.close();
                });
                codeBlock.querySelector('.code-actions').prepend(tryBtn);
            }
            
            return codeBlock;
        }

        // 下载代码
        function downloadCode(code, lang) {
            const extension = getFileExtension(lang);
            const blob = new Blob([code], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `code.${extension}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // 获取文件扩展名
        function getFileExtension(lang) {
            const extensions = {
                'javascript': 'js',
                'python': 'py',
                'java': 'java',
                'c': 'c',
                'cpp': 'cpp',
                'csharp': 'cs',
                'php': 'php',
                'ruby': 'rb',
                'go': 'go',
                'swift': 'swift',
                'kotlin': 'kt',
                'typescript': 'ts',
                'html': 'html',
                'css': 'css',
                'json': 'json',
                'xml': 'xml',
                'markdown': 'md',
                'bash': 'sh',
                'shell': 'sh',
                'lua': 'lua'
            };
            
            return extensions[lang] || 'txt';
        }

        // 显示正在输入指示器
        function showTypingIndicator() {
            if (isTyping) return;
            
            isTyping = true;
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message ai-message';
            typingDiv.id = 'typing-indicator';
            
            const aiAvatarSrc = 'https://q.qlogo.cn/g?b=qq&nk=3774330268&s=640';
            
            typingDiv.innerHTML = `
                <img class="message-avatar" src="${aiAvatarSrc}" alt="AI头像">
                <div class="message-content">
                    <div class="message-user">DeepSeek</div>
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingDiv);
            scrollToBottom();
        }

        // 隐藏正在输入指示器
        function hideTypingIndicator() {
            isTyping = false;
            const typingDiv = document.getElementById('typing-indicator');
            if (typingDiv) {
                typingDiv.remove();
            }
        }

        // 滚动到底部
        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // 模拟网络搜索
        async function performWebSearch(query) {
            // 这里应该是调用实际的搜索API
            // 为了演示，我们返回模拟数据
            return new Promise(resolve => {
                setTimeout(() => {
                    const mockResults = [
                        {
                            url: 'https://example.com/page1',
                            snippet: `这是关于"${query}"的第一个搜索结果摘要。包含相关信息供参考。`
                        },
                        {
                            url: 'https://example.com/page2',
                            snippet: `这是关于"${query}"的第二个搜索结果摘要。提供更多细节和背景知识。`
                        },
                        {
                            url: 'https://example.com/page3',
                            snippet: `这是关于"${query}"的第三个搜索结果摘要。包含最新的相关数据和统计。`
                        }
                    ];
                    resolve(mockResults);
                }, 1000);
            });
        }

        // 发送消息
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            // 取消任何正在进行的请求
            if (currentStream) {
                currentStream.abort();
                currentStream = null;
            }
            
            // 添加用户消息
            addMessageToChat('user', message);
            messageInput.value = '';
            
            // 显示AI正在输入
            showTypingIndicator();
            
            // 重置当前响应
            currentResponse = '';
            responseDiv = null;
            
            try {
                const settings = JSON.parse(localStorage.getItem('deepseekSettings')) || {};
                const apiKey = settings.apiKey || '';
                
                if (!apiKey) {
                    throw new Error('请先在设置中配置API密钥');
                }
                
                // 如果是联网搜索模式，先执行搜索
                if (currentMode === 'web') {
                    webSearchResults = await performWebSearch(message);
                } else {
                    webSearchResults = null;
                }
                
                // 准备消息历史
                const messages = [
                    ...chats[currentChatId].messages.map(msg => ({
                        role: msg.role,
                        content: msg.content
                    }))
                ];
                
                // 如果是联网搜索模式，添加搜索结果到上下文
                if (currentMode === 'web' && webSearchResults) {
                    const searchContext = webSearchResults.map(result => 
                        `URL: ${result.url}\n摘要: ${result.snippet}`
                    ).join('\n\n');
                    
                    messages.push({
                        role: 'system',
                        content: `以下是用户的搜索查询和网络搜索结果:\n\n查询: ${message}\n\n搜索结果:\n${searchContext}\n\n请根据这些信息回答用户的问题。`
                    });
                }
                
                // 如果是深度思考模式，添加提示
                if (currentMode === 'deep') {
                    messages.push({
                        role: 'system',
                        content: '请逐步思考问题，展示你的思考过程，然后给出最终回答。格式为: "思考过程: ... 最终回答: ..."'
                    });
                }
                
                // 调用DeepSeek API (流式)
                const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: currentModel,
                        messages: messages,
                        stream: true
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`API请求失败: ${response.status}`);
                }
                
                // 保存当前流以便可以取消
                currentStream = response;
                
                // 处理流式响应
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                
                // 创建AI消息容器
                addMessageToChat('assistant', '');
                
                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;
                    
                    const chunk = decoder.decode(value);
                    const lines = chunk.split('\n').filter(line => line.trim() !== '');
                    
                    for (const line of lines) {
                        if (line.startsWith('data:') && line !== 'data: [DONE]') {
                            try {
                                const data = JSON.parse(line.substring(5));
                                if (data.choices && data.choices[0].delta && data.choices[0].delta.content) {
                                    currentResponse += data.choices[0].delta.content;
                                    
                                    // 更新UI
                                    if (responseDiv) {
                                        processContent(currentResponse, responseDiv);
                                        scrollToBottom();
                                    }
                                }
                            } catch (e) {
                                console.error('解析流数据错误:', e);
                            }
                        }
                    }
                }
                
                // 完成响应
                if (chats[currentChatId]) {
                    chats[currentChatId].messages.push({
                        role: 'assistant',
                        content: currentResponse
                    });
                    
                    // 更新聊天模型和模式
                    chats[currentChatId].model = currentModel;
                    chats[currentChatId].mode = currentMode;
                    saveChats();
                }
            } catch (error) {
                hideTypingIndicator();
                console.error('API调用错误:', error);
                addMessageToChat('assistant', `抱歉，发生错误: ${error.message}`);
            } finally {
                hideTypingIndicator();
                currentStream = null;
            }
        }

        // 切换侧边栏
        function toggleSidebar() {
            sidebar.classList.toggle('open');
        }

        // 切换模型选择器
        function toggleModelSelector() {
            modelSelector.style.display = modelSelector.style.display === 'block' ? 'none' : 'block';
        }

        // 自动调整输入框高度
        function adjustTextareaHeight() {
            messageInput.style.height = 'auto';
            messageInput.style.height = (messageInput.scrollHeight) + 'px';
        }

        // 转义HTML特殊字符
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // 事件监听
        messageInput.addEventListener('input', adjustTextareaHeight);
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        sendButton.addEventListener('click', sendMessage);
        settingsBtn.addEventListener('click', () => {
            settingsModal.style.display = 'flex';
        });
        closeSettingsBtn.addEventListener('click', () => {
            settingsModal.style.display = 'none';
        });
        saveSettingsBtn.addEventListener('click', saveSettings);
        menuBtn.addEventListener('click', toggleSidebar);
        closeSidebarBtn.addEventListener('click', toggleSidebar);
        newChatBtn.addEventListener('click', newChat);
        modelToggleBtn.addEventListener('click', toggleModelSelector);
        
        // 模式选择
        modeBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                currentMode = btn.dataset.mode;
                updateModeUI();
                toggleModelSelector();
                
                // 更新当前聊天的模式
                if (chats[currentChatId]) {
                    chats[currentChatId].mode = currentMode;
                    saveChats();
                }
            });
        });
        
        // 模型选择
        modelOptions.forEach(option => {
            option.addEventListener('click', () => {
                currentModel = option.dataset.model;
                updateModelUI();
                toggleModelSelector();
                
                // 更新当前聊天的模型
                if (chats[currentChatId]) {
                    chats[currentChatId].model = currentModel;
                    saveChats();
                }
            });
        });
        
        // 点击外部关闭模型选择器
        document.addEventListener('click', (e) => {
            if (!modelSelector.contains(e.target) && e.target !== modelToggleBtn) {
                modelSelector.style.display = 'none';
            }
        });

        // 初始化应用
        init();
    </script>
</body>
</html>
